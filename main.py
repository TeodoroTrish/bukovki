import telebot
import random
from telebot import types
from urllib import request
from PIL import Image  
from io import BytesIO
import pytesseract

bot = telebot.TeleBot("TELEBOT_API")

class User:
    def __init__(self, chat_id, level=None, word=None, masked_word=None, tries=5):
        self.chat_id = chat_id
        self.level = level
        self.word = word
        self.masked_word = masked_word
        self.tries = tries

users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≥–¥–µ –≤—Å—ë –ø–æ–¥—Ä—è–¥!")

@bot.message_handler(commands=['bukavki'])
def game(message):
    if message.chat.id in users:
        del users[message.chat.id]

    result = request.urlopen("https://calculator888.ru/random-generator/sluchaynoye-slovo")
    data = result.read().decode()
    w1 = '<div class="blok_otvet" id="bov" style="font-size:60px;">'
    start = data.find(w1)
    data = data[start:]
    w2 = "</div>"
    end = data.find(w2)
    word = data[:end].replace(w1, '').strip().lower()
    users[message.chat.id] = User(chat_id=message.chat.id, word=word, masked_word="_" * len(word))
    bot.send_message(message.chat.id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + users[message.chat.id].masked_word)
    bot.send_message(message.chat.id, str(len(word)) + " –±—É–∫–≤")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É:")

@bot.message_handler(func=lambda message: len(message.text) == 1 and message.text.isalpha())
def check_letter(message):
    if message.chat.id in users:
        user = users[message.chat.id]
        letter = message.text.lower()
        print(user.word)
        if letter in user.word:
            temp_word = "".join([letter if user.word[i] == letter else user.masked_word[i] for i in range(len(user.word))])
            user.masked_word = temp_word
            if temp_word == user.word:
                bot.send_message(message.chat.id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + temp_word)
                bot.send_message(message.chat.id, "–í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
                del users[message.chat.id]
                return
        else:
            user.tries -= 1

        bot.send_message(message.chat.id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + user.masked_word)
        bot.send_message(message.chat.id, "–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: " + str(user.tries))
        bot.send_message(message.chat.id, "–ê –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –º–µ–Ω—å—à–µ —á–∏—Å–ª–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫? –≠—Ç–æ —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ aviasales.ru!")
        
        if user.tries == 0:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: " + str(user.word))
            del users[message.chat.id]



games = {}  # Dictionary to store game state for each user

@bot.message_handler(commands=['chiselki'])
def number_guessing_game(message):
    chat_id = message.chat.id
    target_number = random.randint(0, 100)
    attempts = 0
    games[chat_id] = {
        'target_number': target_number,
        'attempts': attempts
    }
    
    bot.send_message(chat_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É chiselki!")
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ")
    bot.register_next_step_handler(message, handle_guess)

def handle_guess(message):
    chat_id = message.chat.id
    if chat_id not in games:
        return
    
    guess = message.text
    
    if not guess.isdigit():
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, handle_guess)
        return
    
    guess = int(guess)
    target_number = games[chat_id]['target_number']
    games[chat_id]['attempts'] += 1
    
    if guess < target_number:
        bot.send_message(chat_id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ")
        bot.register_next_step_handler(message, handle_guess)
    elif guess > target_number:
        bot.send_message(chat_id, "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ")
        bot.register_next_step_handler(message, handle_guess)
    else:
        bot.send_message(chat_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {target_number} –∑–∞ {games[chat_id]['attempts']} –ø–æ–ø—ã—Ç–æ–∫")
        del games[chat_id]  # End the game
@bot.message_handler(commands=['number'])
def number(message):
    chat_id = message.chat.id
    number = random.randint(0, 999999999)
    bot.send_message(chat_id, number)
@bot.message_handler(commands=['word'])
def word(message):
    chat_id = message.chat.id
    result = request.urlopen("https://calculator888.ru/random-generator/sluchaynoye-slovo")
    data = result.read().decode()
    w1 = '<div class="blok_otvet" id="bov" style="font-size:60px;">'
    start = data.find(w1)
    data = data[start:]
    w2 = "</div>"
    end = data.find(w2)
    wordd = data[:end].replace(w1, '').strip().lower()
    bot.send_message(chat_id, wordd)

@bot.message_handler(commands=['patriot'])
def patriot(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ç—Ä–∏–æ—Ç–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞!")
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–∞—Ç—Ä–∏–æ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")
    bot.register_next_step_handler(message, petriot)

def petriot(message):
    chat_id = message.chat.id
    text = message.text
    ao=text.replace("—Å–≤–æ", "–°–í–û")
    c=ao.replace("–°–≤–æ", "–°–í–û")
    e=c.replace("–í", "V")
    a=c.replace("–∑", "Z")
    b=a.replace("–≤", "V")
    d=b.replace("–ó", "Z")
    bot.send_message(chat_id, "üá∑üá∫üá∑üá∫üá∑üá∫" + d + "üá∑üá∫üá∑üá∫üá∑üá∫")


import os

@bot.message_handler(commands=['photo'])
def phota(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É.")
    bot.register_next_step_handler(message, convert_to_symbols)

def convert_to_symbols(message):
    # Get the photo
    photo = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    
    # Process the image
    image = Image.open(BytesIO(downloaded_file))
    
    # Limit the image size
    max_image_size = 800
    width, height = image.size
    if width > max_image_size or height > max_image_size:
        max_dimension = max(width, height)
        factor = max_dimension / max_image_size
        new_width = int(width / factor)
        new_height = int(height / factor)
        image = image.resize((new_width, new_height))
    
    # Define the ASCII characters
    ascii_chars = '@%#*+=-:. '
    
    ascii_image = ''
    for y in range(image.size[1]):  # height
        line = ''
        for x in range(image.size[0]):  # width
            pixel = image.getpixel((x, y))
            brightness = sum(pixel) / 3
            line += ascii_chars[int(brightness / 256 * len(ascii_chars))]
        ascii_image += line + '\n'
    
    # Save ASCII art to a text file
    file_path = 'ascii_art.txt'
    with open(file_path, 'w') as file:
        file.write(ascii_image)
    
    # Send the text file to the user
    with open(file_path, 'rb') as file:
        bot.send_document(message.chat.id, file)
    
    # Clean up - Delete the text file
    os.remove(file_path)


# Dictionary to store user language preferences (can be saved in a database for persistence)
user_languages = {}

# Function to handle incoming messages
@bot.message_handler(commands=['textphoto'])
def handle_ocr(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(message.text.split(' ')) > 1:
        lang_code = message.text.split(' ', 1)[1].strip()
        if is_valid_language(lang_code):
            user_languages[message.chat.id] = lang_code
            bot.reply_to(message, f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {lang_code}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
            bot.register_next_step_handler(message, textphoto)
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–¥ —è–∑—ã–∫–∞.")
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/textphoto <–∫–æ–¥_—è–∑—ã–∫–∞>' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, '/textphoto eng' –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ —è–∑—ã–∫–∞
def is_valid_language(lang_code):
    # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–µ—Å—å –¥–ª—è –∫–æ–¥–æ–≤ —è–∑—ã–∫–∞
    valid_languages = ["eng", "deu", "fra", "spa", "ita", "por", "nld", "rus", "jpn", "kor", "chi_sim", "chi_tra"]  # –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–æ–¥–æ–≤ —è–∑—ã–∫–æ–≤
    if lang_code in valid_languages:
        return True
    else:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def textphoto(message):
    user_id = message.chat.id
    if user_id in user_languages:
        lang = user_languages[user_id]
    else:
        lang = 'eng'  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∂–µ—Ç –∏–Ω–æ–π

    extracted_text = extract_text_from_image(message, lang)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.reply_to(message, f"–¢–µ–∫—Å—Ç –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏:\n\n{extracted_text}")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def extract_text_from_image(message, lang='eng'):
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    file_id = message.photo[-1].file_id
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º BytesIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –≤ –ø–∞–º—è—Ç–∏
    image = Image.open(BytesIO(downloaded_file))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Tesseract OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    text = pytesseract.image_to_string(image, lang=lang)

    return text
bot.polling()
